import { IOpenable } from 'pip-services-commons-node';
import { IConfigurable } from 'pip-services-commons-node';
import { IReferenceable } from 'pip-services-commons-node';
import { IReferences } from 'pip-services-commons-node';
import { ConfigParams } from 'pip-services-commons-node';
import { CompositeLogger } from 'pip-services-components-node';
import { CompositeCounters } from 'pip-services-components-node';
import { FilterParams } from 'pip-services-commons-node';
import { PagingParams } from 'pip-services-commons-node';
import { DataPage } from 'pip-services-commons-node';
import { AwsConnectionResolver } from 'pip-services-aws-node';
import { AwsConnectionParams } from 'pip-services-aws-node';
import { BlobInfoV1 } from './BlobInfoV1';
import { IBlobsClientV1 } from './IBlobsClientV1';
export declare class BlobsS3ClientV1 implements IOpenable, IConfigurable, IReferenceable, IBlobsClientV1 {
    protected _s3: any;
    protected _opened: boolean;
    protected _connection: AwsConnectionParams;
    protected _bucket: string;
    protected _connectTimeout: number;
    protected _minChunkSize: number;
    protected _maxBlobSize: number;
    protected _reducedRedundancy: boolean;
    protected _maxPageSize: number;
    protected _connectionResolver: AwsConnectionResolver;
    protected _logger: CompositeLogger;
    protected _counters: CompositeCounters;
    constructor(config?: any);
    configure(config: ConfigParams): void;
    setReferences(references: IReferences): void;
    isOpen(): boolean;
    open(correlationId: string, callback: (err?: any) => void): void;
    close(correlationId: string, callback?: (err?: any) => void): void;
    private normalizeName(name);
    private dataToInfo(id, data);
    private encodeString(value);
    private decodeString(value);
    private matchString(value, search);
    private matchSearch(item, search);
    private composeFilter(filter);
    getBlobsByFilter(correlationId: string, filter: FilterParams, paging: PagingParams, callback: (err: any, page: DataPage<BlobInfoV1>) => void): void;
    getBlobsByIds(correlationId: string, blobIds: string[], callback: (err: any, blobs: BlobInfoV1[]) => void): void;
    getBlobById(correlationId: string, blobId: string, callback: (err: any, blob: BlobInfoV1) => void): void;
    createBlobFromUri(correlationId: string, blob: BlobInfoV1, uri: string, callback?: (err: any, blob: BlobInfoV1) => void): any;
    getBlobUriById(correlationId: string, blobId: string, callback: (err: any, uri: string) => void): void;
    createBlobFromData(correlationId: string, blob: BlobInfoV1, buffer: any, callback?: (err: any, blob: BlobInfoV1) => void): void;
    getBlobDataById(correlationId: string, blobId: string, callback: (err: any, blob: BlobInfoV1, buffer: any) => void): void;
    createBlobFromStream(correlationId: string, blob: BlobInfoV1, callback?: (err: any, blob: BlobInfoV1) => void): any;
    getBlobStreamById(correlationId: string, blobId: string, callback?: (err: any, blob: BlobInfoV1, stream: any) => void): any;
    updateBlobInfo(correlationId: string, blob: BlobInfoV1, callback: (err: any, blob: BlobInfoV1) => void): void;
    markBlobsCompleted(correlationId: string, ids: string[], callback: (err: any) => void): void;
    deleteBlobById(correlationId: string, blobId: string, callback?: (err: any) => void): void;
    deleteBlobsByIds(correlationId: string, blobIds: string[], callback?: (err: any) => void): void;
    clear(correlationId: string, callback?: (err: any) => void): void;
}
